Communication Protocol for Authentication Server (AS):

We build a class 'Connection' that approximately realizes the functionality of socket. Communication with AS relies on this 'Connection' class.

Messages sent to the AS needs to be in the following form:

(Pub/Sub Code, Action Code, *Args)

Pub/Sub Code takes value from {0,1,-1}, where
    1 - Denotes publisher authentication (Publisher --> AS)
    0 - Denotes subscriber authentication (Subscriber --> AS)
    -1 - Denote AS authentication (AS --> Publisher/Subscriber)

Action Code takes value from {1,2,3}:
	1 - Certification process, where a publisher/subscriber send certification to AS and AS send back a random number showing that the certification has been approved. (NOTE: The response message use the same pub/sub code and action code as the original message)
	2 - Verify signature, where the publisher/subscriber send signature to AS and AS send back a flag indicating whether the verification has succeed. (For subscriber only, AS is also going to send a list of registered publisher certificates)
	3 - Send topic key, where the publisher/subscriber send a message to AS to require topic keys, and AS send back required information.

*Args are other inputs needed for completing corresponding actions.



Response sent back from AS takes the following form:

(Pub/Sub Code, Action Code, Flag, *Args)

where Pub/Sub Code and Action Code have to be the same as the message it reponses to, Flag denotes whether the process is successful, *Args are other output needed for the reply.


Authentication Manager:

All the info about topic keys and registered machines are stored in a class 'AuthenticationManager'. The authentic manager stores the following data:

1. Session keys: Dictionary {topic name: topic key}
2. Publisher list: Dictionary {publisher name: (Certificate, publishing topics)}
3. Subscriber list: Dictionary {subscriber name: subscription topics}